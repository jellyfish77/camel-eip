<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file 
	distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under 
	the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may 
	obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to 
	in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF 
	ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under 
	the License. -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:broker="http://activemq.apache.org/schema/core"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://camel.apache.org/schema/spring 
       http://camel.apache.org/schema/spring/camel-spring.xsd
       http://activemq.apache.org/schema/core 
       http://activemq.apache.org/schema/core/activemq-core.xsd">

	<bean id="downloadLogger" class="loggers.DownloadLogger" />

	<bean id="messageLogger" class="loggers.MessageLogger" />

	<bean id="committer" class="utils.Committer" />

	<bean id="escapeCharsBean" class="movies.EscapeSpecialCharsBean" />

	<bean id="movieCsvToXmlConverter" class="movies.MovieCsvToXmlConverter" />

	<bean id="omdbDynamicRouter" class="movies.OmdbDynamicRouterBean" />

	<bean id="omdbService" class="movies.OmdbServiceBean" />

	<!-- Camel Properties component -->
	<bean id="properties" class="org.apache.camel.component.properties.PropertiesComponent">
		<property name="location" value="classpath:META-INF/spring/camel-config.properties" />
	</bean>

	<bean id="movieAggregationStrategy" class="movies.MovieAggregationStrategy" />

	<!-- Active MQ Config -->

	<!-- ActiveMQ connection factory -->
	<bean id="poolConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory" init-method="start"
		destroy-method="stop">
		<property name="maxConnections" value="8" />
		<property name="connectionFactory" ref="jmsConnectionFactory" />
	</bean>

	<bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://localhost:6616" />
	</bean>

	<!-- Spring JMX TX manager -->
	<bean id="jmsTransactionManager" class="org.springframework.jms.connection.JmsTransactionManager">
		<property name="connectionFactory" ref="poolConnectionFactory" />
	</bean>

	<!-- Policy for required -->
	<bean id="PROPAGATION_REQUIRED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
		<property name="transactionManager" ref="jmsTransactionManager" />
	</bean>

	<!-- Jms configuration -->
	<bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
		<property name="connectionFactory" ref="poolConnectionFactory" />
		<property name="transactionManager" ref="jmsTransactionManager" />
		<property name="transacted" value="true" />
		<property name="concurrentConsumers" value="1" />
	</bean>

	<!-- ActiveMQ component to be used in Camel -->
	<bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
		<property name="connectionFactory" ref="poolConnectionFactory" />
		<property name="configuration" ref="jmsConfig" />
	</bean>

	<!-- End Active MQ Config -->

	<!-- MySQL Conn -->

	<!-- define the datasource to the staging database -->
	<bean id="stagingDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost/staging" />
		<property name="username" value="root" />
		<property name="password" value="root" />
	</bean>

	<!-- End MySQL Conn -->

	<camelContext xmlns="http://camel.apache.org/schema/spring" errorHandlerRef="defaultEH"
		useMDCLogging="true" trace="false">

		<!-- default error handler: retry on exceptions propagated back to the channels between nodes in the routes -->
		<!-- by default there is no re-delivery, and exceptions are propagated back to the caller -->
		<!-- handles any uncaught exception -->
		<errorHandler id="defaultEH" redeliveryPolicyRef="defaultPolicy" type="DefaultErrorHandler" />

		<errorHandler id="transEH" type="TransactionErrorHandler" rollbackLoggingLevel="DEBUG" >
			<redeliveryPolicy maximumRedeliveries="1" retryAttemptedLogLevel="DEBUG" backOffMultiplier="2"
				useExponentialBackOff="true" />
		</errorHandler>

		<!-- and the re-delivery policy is a profile where we can configure it -->
		<redeliveryPolicyProfile id="defaultPolicy" maximumRedeliveries="3" retryAttemptedLogLevel="WARN"
			redeliveryDelay="1000" maximumRedeliveryDelay="10000" backOffMultiplier="2" useExponentialBackOff="true" />		

		<!-- handle specific exception -->
		<onException redeliveryPolicyRef="defaultPolicy">
			<exception>java.net.ConnectException</exception>
			<handled>
				<constant>false</constant>
			</handled>
			<log message="Delivery failed [onException: java.net.ConnectException]" />
			<!-- and important to mark the transaction to still rollback even if we handled the exception -->
			<!-- this must be done as the last step in onException -->
			<rollback markRollbackOnly="true" />
		</onException>		
		
		<route id="inputCsvFileRoute">
			<from
				uri="file:src/data/input?preMove=.inprocess&amp;move=.camel&amp;runLoggingLevel=TRACE&amp;maxMessagesPerPoll=1&amp;idempotent=true&amp;readLock=changed" />
			<to uri="activemq:queue:movieCsvFile" />
			<log message="Inbound CSV file '${header.CamelFileName}' sent to queue" loggingLevel="INFO" marker="CSVComplete" />
		</route>
		
		<route id="getCsvFileFromQueue" errorHandlerRef="transEH">
			<from uri="activemq:queue:movieCsvFile" />
			<transacted />			
			<log
				message="Read CSV file from queue [JMSXDeliveryCount=${header.JMSXDeliveryCount}; JMSRedelivered=${header.JMSRedelivered}]"
				loggingLevel="INFO" />
			<process ref="messageLogger" id="Log CSV File read from Queue" />
			<to uri="direct:movieCsvFile" />
		</route>

		<route id="splitCsvFileRoute" >
			<from uri="direct:movieCsvFile" />			
			<log
				message="Splitting file into CSV lines..."	loggingLevel="INFO" />			
			<!-- streaming allows processing of one line at a time, but the CamelSplitSize is not available until the last line -->
			<split streaming="false">
				<tokenize token="\n" />
				<filter>
					<!-- Only allow from second line onwards (ignore CSV header) -->
					<simple>${property.CamelSplitIndex} > 0</simple>
					<setHeader headerName="CsvSize">
						<simple>${property.CamelSplitSize}</simple>
					</setHeader>
					<setHeader headerName="CsvIndex">
						<simple>${property.CamelSplitIndex}</simple>
					</setHeader>
					<!-- Do not route empty lines (contain only \n) -->
					<choice>
						<when>
							<simple>${body.length} > 1</simple>
							<to uri="direct:movieCsvLine" />
						</when>
						<otherwise>
							<log message="CSV line is null or empty, no further route" />
						</otherwise>
					</choice>
				</filter>
			</split>
			<!-- <log message="CSV file split complete" loggingLevel="INFO" /> -->
		</route>

		<route id="convertCsvToXmlRoute">
			<from uri="direct:movieCsvLine" />
			<process ref="messageLogger" id="Log Split CSV Row" />
			<bean ref="movieCsvToXmlConverter" method="convertCsvToXml" />
			<to uri="direct:movieXmlRow" />
		</route>

		<route id="enrichRoute">
			<from uri="direct:movieXmlRow" />
			<process ref="messageLogger" id="Log Converted XML Row" />
			<setHeader headerName="MovieTitle">
				<xpath resultType="java.lang.String">/Movie/Title/text()</xpath>
			</setHeader>
			<setHeader headerName="OmdbUrl">
				<simple>{{omdbUrl}}</simple>
			</setHeader>
			<setHeader headerName="OmdbKey">
				<simple>{{omdbKey}}</simple>
			</setHeader>
			<bean ref="omdbService" method="enrichMovie(*, *, *)" />
			<to uri="direct:enrichedMovieXmlRecord" />
		</route>

		<route id="validateXmlRoute">
			<from uri="direct:enrichedMovieXmlRecord" />
			<process ref="messageLogger" id="Log Enriched XML Row" />
			<doTry>
				<to uri="validator:file:src/main/resources/XSD/MovieCMM.xsd" />
				<to uri="activemq:queue:validatedMovieCmmRecord" />
				<doCatch>
					<exception>org.apache.camel.ValidationException</exception>
					<to uri="activemq:queue:movieCmmRecordDeadLetter" />
					<process ref="messageLogger" id="Log Invalid XML Row" />
				</doCatch>
			</doTry>
		</route>

		<route id="multicastCmmRowRoute">
			<from uri="activemq:queue:validatedMovieCmmRecord" />
			<process ref="messageLogger" id="Log Validated CMM Row" />
			<multicast>
				<to uri="direct:validatedMovieAggregator" />
				<to uri="direct:validatedMovieLanguageRouter" />
				<to uri="direct:validatedMovieDbCommitter" />
			</multicast>
		</route>

		<route id="aggregationRoute">
			<from uri="direct:validatedMovieAggregator" />
			<aggregate strategyRef="movieAggregationStrategy" completionInterval="90000" eagerCheckCompletion="true">
				<correlationExpression>
					<header>CamelFileName</header>
				</correlationExpression>
				<bean ref="movieCsvToXmlConverter" method="addRootNode" />
				<to uri="activemq:queue:aggregatedValidatedCmmRecords" />
			</aggregate>
		</route>

		<route id="psvTransformRoute">
			<from uri="activemq:queue:aggregatedValidatedCmmRecords" />
			<process ref="messageLogger" id="Log Aggregated Movies" />
			<to uri="xslt:file:src/main/resources/XSLT/MovieToPsv.xslt" />
			<to uri="activemq:queue:psvFile" />
			<log message="XSLT transform to PSV complete" loggingLevel="INFO" />
		</route>

		<route id="psvFileOutputRoute">
			<from uri="activemq:queue:psvFile" />
			<process ref="messageLogger" id="Log Transformed PSV File" />
			<to uri="file:src/data/output?fileName=${file:name.noext}.psv" />
		</route>

		<route id="createDbXmlPayload">
			<from uri="direct:validatedMovieDbCommitter" />
			<setHeader headerName="MysqlConn">
				<simple>{{mysqlConn}}</simple>
			</setHeader>
			<setHeader headerName="MysqlClass">
				<simple>{{mysqlDriverClass}}</simple>
			</setHeader>
			<setHeader headerName="MysqlUser">
				<simple>{{mysqlUser}}</simple>
			</setHeader>
			<setHeader headerName="MysqlPassword">
				<simple>{{mysqlPassword}}</simple>
			</setHeader>
			<setHeader headerName="MysqlStagingDatabase">
				<simple>{{mysqlStagingDatabase}}</simple>
			</setHeader>
			<setHeader headerName="MysqlMoviesTable">
				<simple>{{mysqlMoviesTable}}</simple>
			</setHeader>
			<to uri="xslt:file:src/main/resources/XSLT/MovieToCommitStatement.xslt" />
			<to uri="activemq:queue:commitDbPayload" />
		</route>

		<route id="commitDbXmlPayload">
			<from uri="activemq:queue:commitDbPayload" />
			<process ref="messageLogger" id="Log DB Payload" />
			<bean ref="committer" method="toSql(*, {{mysqlMoviesTable}})" />
			<to uri="jdbc:stagingDataSource" />
		</route>

		<route id="languageRoute">
			<from uri="direct:validatedMovieLanguageRouter" />
			<choice>
				<when>
					<xpath>//Format/Language/text()='English'</xpath>
					<to uri="activemq:queue:englishMovies" />
				</when>
				<otherwise>
					<!-- <log message="CSV line is null or empty, no further route" /> -->
					<to uri="activemq:queue:foreignMovies" />
				</otherwise>
			</choice>
		</route>

		<route id="englishRoute">
			<from uri="activemq:queue:englishMovies" />
			<process ref="messageLogger" id="Log English Movie" />
		</route>

		<route id="foreignRoute">
			<from uri="activemq:queue:foreignMovies" />
			<process ref="messageLogger" id="Log Foreign Movie" />
		</route>

	</camelContext>


</beans>
